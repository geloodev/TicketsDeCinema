<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>